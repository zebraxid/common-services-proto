// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	client "github.com/micro/go-micro/v2/client"
	commonproto "github.com/zebraxid/common-services-proto"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// AddCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) AddCasbinPolicy(ctx context.Context, in *commonproto.CasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) AuthorizeToken(ctx context.Context, in *commonproto.CoreRequest, opts ...client.CallOption) (*commonproto.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) *commonproto.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkAddCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) BulkAddCasbinPolicy(ctx context.Context, in *commonproto.BulkCasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.BulkCasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.BulkCasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkAddUserGroup provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) BulkAddUserGroup(ctx context.Context, in *commonproto.BulkAddUserGroupPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.BulkAddUserGroupPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.BulkAddUserGroupPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkListCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) BulkListCasbinPolicy(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkRemoveCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) BulkRemoveCasbinPolicy(ctx context.Context, in *commonproto.BulkCasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.BulkCasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.BulkCasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkReplaceCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) BulkReplaceCasbinPolicy(ctx context.Context, in *commonproto.BulkReplaceCasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.BulkReplaceCasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.BulkReplaceCasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ChangePassword(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttributePolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateAttributePolicy(ctx context.Context, in *commonproto.AttributePolicyRequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreatePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateProduct(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateProductOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateRole(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRolePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateRolePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) CreateUser(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DMAAListUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DMAAListUser(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttributePolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteAttributePolicy(ctx context.Context, in *commonproto.AttributePolicyRequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteGroup(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeletePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteProduct(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteProductOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRole provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteRole(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRolePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteRolePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) DeleteUser(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) GetProduct(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) GetProfile(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttributePolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListAttributePolicy(ctx context.Context, in *commonproto.AttributePolicyRequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListCasbinPolicy(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListPermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProduct provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListProduct(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListProductOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRole provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListRole(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRolePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListRolePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ListUser(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) LogoutToken(ctx context.Context, in *commonproto.CoreRequest, opts ...client.CallOption) (*commonproto.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) *commonproto.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OneTimePassword provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) OneTimePassword(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) RefreshToken(ctx context.Context, in *commonproto.CoreRequest, opts ...client.CallOption) (*commonproto.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) *commonproto.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) RemoveCasbinPolicy(ctx context.Context, in *commonproto.CasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ReplaceCasbinPolicy(ctx context.Context, in *commonproto.ReplaceCasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.ReplaceCasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.ReplaceCasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSSOToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) RequestSSOToken(ctx context.Context, in *commonproto.CoreRequest, opts ...client.CallOption) (*commonproto.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) *commonproto.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) RequestToken(ctx context.Context, in *commonproto.CoreRequest, opts ...client.CallOption) (*commonproto.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) *commonproto.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CoreRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ResetPassword(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttributePolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateAttributePolicy(ctx context.Context, in *commonproto.AttributePolicyRequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.AttributePolicyRequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdatePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateProduct(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductOrganization provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateProductOrganization(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.ProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.ProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateProfile(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateRole(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRolePermission provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateRolePermission(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) UpdateUser(ctx context.Context, in *commonproto.RequestPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.RequestPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCasbinPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AuthService) ValidateCasbinPolicy(ctx context.Context, in *commonproto.CasbinPolicyPayload, opts ...client.CallOption) (*commonproto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) *commonproto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.CasbinPolicyPayload, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
