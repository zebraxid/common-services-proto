// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	commonproto "github.com/zebraxid/common-services-proto"

	mock "github.com/stretchr/testify/mock"
)

// InAppNotificationHandler is an autogenerated mock type for the InAppNotificationHandler type
type InAppNotificationHandler struct {
	mock.Mock
}

// GetMessages provides a mock function with given fields: _a0, _a1, _a2
func (_m *InAppNotificationHandler) GetMessages(_a0 context.Context, _a1 *commonproto.GetMessagesRequest, _a2 *commonproto.InAppNotifResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.GetMessagesRequest, *commonproto.InAppNotifResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessagesStream provides a mock function with given fields: _a0, _a1, _a2
func (_m *InAppNotificationHandler) GetMessagesStream(_a0 context.Context, _a1 *commonproto.GetMessagesRequest, _a2 commonproto.InAppNotification_GetMessagesStreamStream) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.GetMessagesRequest, commonproto.InAppNotification_GetMessagesStreamStream) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *InAppNotificationHandler) ReadMessage(_a0 context.Context, _a1 *commonproto.ReadMessageRequest, _a2 *commonproto.InAppNotifResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.ReadMessageRequest, *commonproto.InAppNotifResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *InAppNotificationHandler) SendMessage(_a0 context.Context, _a1 *commonproto.SendMessageRequest, _a2 *commonproto.InAppNotifResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.SendMessageRequest, *commonproto.InAppNotifResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
