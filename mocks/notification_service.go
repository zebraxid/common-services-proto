// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	client "github.com/micro/go-micro/v2/client"
	commonproto "github.com/zebraxid/common-services-proto"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

// BulkSendNotification provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) BulkSendNotification(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotificationGroup provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) CreateNotificationGroup(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotificationGroupMember provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) CreateNotificationGroupMember(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationGroup provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) DeleteNotificationGroup(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationGroupMember provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) DeleteNotificationGroupMember(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationGroup provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) ListNotificationGroup(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationGroupMember provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) ListNotificationGroupMember(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationLog provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) ListNotificationLog(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationPermission provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) ListNotificationPermission(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendNotification provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) SendNotification(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotificationPermission provides a mock function with given fields: ctx, in, opts
func (_m *NotificationService) UpdateNotificationPermission(ctx context.Context, in *commonproto.NotificationRequest, opts ...client.CallOption) (*commonproto.NotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *commonproto.NotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) *commonproto.NotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *commonproto.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
