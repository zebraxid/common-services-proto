// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	commonproto "github.com/zebraxid/common-services-proto"

	mock "github.com/stretchr/testify/mock"
)

// InAppNotification_GetMessagesStreamService is an autogenerated mock type for the InAppNotification_GetMessagesStreamService type
type InAppNotification_GetMessagesStreamService struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *InAppNotification_GetMessagesStreamService) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *InAppNotification_GetMessagesStreamService) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Recv provides a mock function with given fields:
func (_m *InAppNotification_GetMessagesStreamService) Recv() (*commonproto.InAppNotifResponse, error) {
	ret := _m.Called()

	var r0 *commonproto.InAppNotifResponse
	if rf, ok := ret.Get(0).(func() *commonproto.InAppNotifResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonproto.InAppNotifResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecvMsg provides a mock function with given fields: _a0
func (_m *InAppNotification_GetMessagesStreamService) RecvMsg(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMsg provides a mock function with given fields: _a0
func (_m *InAppNotification_GetMessagesStreamService) SendMsg(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
