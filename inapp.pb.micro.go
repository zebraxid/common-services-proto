// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inapp.proto

package commonproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InAppNotification service

func NewInAppNotificationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InAppNotification service

type InAppNotificationService interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*InAppNotifResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...client.CallOption) (*InAppNotifResponse, error)
	GetMessagesStream(ctx context.Context, in *GetMessagesRequest, opts ...client.CallOption) (InAppNotification_GetMessagesStreamService, error)
	ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...client.CallOption) (*InAppNotifResponse, error)
}

type inAppNotificationService struct {
	c    client.Client
	name string
}

func NewInAppNotificationService(name string, c client.Client) InAppNotificationService {
	return &inAppNotificationService{
		c:    c,
		name: name,
	}
}

func (c *inAppNotificationService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*InAppNotifResponse, error) {
	req := c.c.NewRequest(c.name, "InAppNotification.SendMessage", in)
	out := new(InAppNotifResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inAppNotificationService) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...client.CallOption) (*InAppNotifResponse, error) {
	req := c.c.NewRequest(c.name, "InAppNotification.GetMessages", in)
	out := new(InAppNotifResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inAppNotificationService) GetMessagesStream(ctx context.Context, in *GetMessagesRequest, opts ...client.CallOption) (InAppNotification_GetMessagesStreamService, error) {
	req := c.c.NewRequest(c.name, "InAppNotification.GetMessagesStream", &GetMessagesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &inAppNotificationServiceGetMessagesStream{stream}, nil
}

type InAppNotification_GetMessagesStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*InAppNotifResponse, error)
}

type inAppNotificationServiceGetMessagesStream struct {
	stream client.Stream
}

func (x *inAppNotificationServiceGetMessagesStream) Close() error {
	return x.stream.Close()
}

func (x *inAppNotificationServiceGetMessagesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *inAppNotificationServiceGetMessagesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *inAppNotificationServiceGetMessagesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *inAppNotificationServiceGetMessagesStream) Recv() (*InAppNotifResponse, error) {
	m := new(InAppNotifResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inAppNotificationService) ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...client.CallOption) (*InAppNotifResponse, error) {
	req := c.c.NewRequest(c.name, "InAppNotification.ReadMessage", in)
	out := new(InAppNotifResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InAppNotification service

type InAppNotificationHandler interface {
	SendMessage(context.Context, *SendMessageRequest, *InAppNotifResponse) error
	GetMessages(context.Context, *GetMessagesRequest, *InAppNotifResponse) error
	GetMessagesStream(context.Context, *GetMessagesRequest, InAppNotification_GetMessagesStreamStream) error
	ReadMessage(context.Context, *ReadMessageRequest, *InAppNotifResponse) error
}

func RegisterInAppNotificationHandler(s server.Server, hdlr InAppNotificationHandler, opts ...server.HandlerOption) error {
	type inAppNotification interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *InAppNotifResponse) error
		GetMessages(ctx context.Context, in *GetMessagesRequest, out *InAppNotifResponse) error
		GetMessagesStream(ctx context.Context, stream server.Stream) error
		ReadMessage(ctx context.Context, in *ReadMessageRequest, out *InAppNotifResponse) error
	}
	type InAppNotification struct {
		inAppNotification
	}
	h := &inAppNotificationHandler{hdlr}
	return s.Handle(s.NewHandler(&InAppNotification{h}, opts...))
}

type inAppNotificationHandler struct {
	InAppNotificationHandler
}

func (h *inAppNotificationHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *InAppNotifResponse) error {
	return h.InAppNotificationHandler.SendMessage(ctx, in, out)
}

func (h *inAppNotificationHandler) GetMessages(ctx context.Context, in *GetMessagesRequest, out *InAppNotifResponse) error {
	return h.InAppNotificationHandler.GetMessages(ctx, in, out)
}

func (h *inAppNotificationHandler) GetMessagesStream(ctx context.Context, stream server.Stream) error {
	m := new(GetMessagesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.InAppNotificationHandler.GetMessagesStream(ctx, m, &inAppNotificationGetMessagesStreamStream{stream})
}

type InAppNotification_GetMessagesStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InAppNotifResponse) error
}

type inAppNotificationGetMessagesStreamStream struct {
	stream server.Stream
}

func (x *inAppNotificationGetMessagesStreamStream) Close() error {
	return x.stream.Close()
}

func (x *inAppNotificationGetMessagesStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *inAppNotificationGetMessagesStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *inAppNotificationGetMessagesStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *inAppNotificationGetMessagesStreamStream) Send(m *InAppNotifResponse) error {
	return x.stream.Send(m)
}

func (h *inAppNotificationHandler) ReadMessage(ctx context.Context, in *ReadMessageRequest, out *InAppNotifResponse) error {
	return h.InAppNotificationHandler.ReadMessage(ctx, in, out)
}
